#ifndef HEADER_interrupt
#define HEADER_interrupt

#define PIC1		    0x20		/* IO base address for master PIC */
#define PIC2		    0xA0		/* IO base address for slave PIC */
#define PIC1_COMMAND	PIC1
#define PIC1_DATA	    (PIC1+1)
#define PIC2_COMMAND	PIC2
#define PIC2_DATA	    (PIC2+1)
#define PIC_EOI		    0x20		/* End-of-interrupt command code */

#define PIC1_VECTOR_OFFSET     0x60        /* This could be any number above 0x1F */
#define PIC2_VECTOR_OFFSET     (PIC1_VECTOR_OFFSET + 8)

/** Generate a full interrupt descriptor table occupying 2KB located at the given pointer.
 *  The interrupts are de-multiplexed to interrupt_handler, passing their id as a parameter.
 *  Implemented in interrupt.c (code generated by genInterruptTable.py)
 */
void generate_idt(unsigned int * idtptr);

/** All interrupts are routed here for coding convenience
 *  Implemented in interrupt_handler.c
 */
void interrupt_handler(unsigned int interrupt, unsigned int errorcode);

/** Send the end of intstruction signal to the PIC.
 *  If this is not called after an interrupt originating from the PIC, it will no longer generate interrupts.
 *  Implemented in interrupt_handler.c
 */
void PIC_sendEOI(unsigned char irq);

/** Remap the PIC(s) to use the given interrupt handler vectors starting at vecOffset_PICx.
 *  for example, interrupt 4 coming from PIC1 will jump to vecOffset_PIC1 + 3
 *  Implemented in interrupt_handler.c
 */
void PIC_remap(unsigned char vecOffset_PIC1, unsigned char vecOffset_PIC2);

/** Sets the IRQ masks equal to the given masks
 *  Implemented in interrupt_handler.c
 */
void IRQ_set_mask(unsigned char PIC1_mask, unsigned char PIC2_mask);

/** Disable interrupts originating from IRQline on the PIC
 *  IRQline is the index in the PIC's interrupt table (0-15)
 *  Implemented in interrupt_handler.c
 */
void IRQ_set_mask_bit(unsigned char IRQline);

/** Enable interrupts originating from IRQline on the PIC
 *  IRQline is the index in the PIC's interrupt table (0-15)
 *  Implemented in interrupt_handler.c
 */
void IRQ_clear_mask_bit(unsigned char IRQline);

/** Configure the PIT timer to send IRQ0 each time it has reached 0 from reload
 *  Implemented in interrupt_handler.c
 */
void timer_config(unsigned short reload);
#endif